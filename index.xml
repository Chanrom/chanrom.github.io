<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chanrom - Logging life</title>
    <link>http://chanrom.github.io/</link>
    <description>Recent content on Chanrom - Logging life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="http://chanrom.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://chanrom.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://chanrom.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Leetcode总结</title>
      <link>http://chanrom.github.io/post/leetcode/leetcode/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chanrom.github.io/post/leetcode/leetcode/</guid>
      
        <description>

&lt;h1 id=&#34;leetcode&#34;&gt;Leetcode&lt;/h1&gt;

&lt;p&gt;一直知道自己的算法能力偏弱，但是却没有时间针对性地练习过相关的能力。趁着自己有想找一份暑期实习的计划下开始刷Leetcode，刚开始时，即使是easy的题目也解的比较费力，在刷到100题的时候，解easy题的速度明显快了很多。但是在面对medium难度的题依然要花很长的时间才可以AC。本着融会贯通、不停进步的思想，我将在这个博客记录、总结一下遇到的题目，以便自己以及有兴趣一起学习的同学参考。&lt;/p&gt;

&lt;p&gt;目前网络上的Leetcode解题思路不计其数，我们可以随手搜到。但是我想只有在自己脑中形成一个知识体系，才可能在所遇到的新问题得到突破。因此这篇博客会尽量地分门别类地总结类似的题目。&lt;/p&gt;

&lt;h1 id=&#34;二叉树的遍历&#34;&gt;二叉树的遍历&lt;/h1&gt;

&lt;p&gt;二叉树的遍历需要熟悉：前序遍历、中序遍历、后序遍历以及层次遍历，包括递归的实现和循环的实现。以下分别给出各个算法的Python实现。&lt;/p&gt;

&lt;h2 id=&#34;前序遍历-递归&#34;&gt;前序遍历-递归&lt;/h2&gt;

&lt;p&gt;递归的实现很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def preorderTraversal(self, root):
        res = []
        def pre(root):
            if not root:
                return 
            res.append(root.val)
            pre(root.left)
            pre(root.right)
        pre(root)
        return res
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;前序遍历-循环&#34;&gt;前序遍历-循环&lt;/h2&gt;

&lt;p&gt;相比递归实现，循环实现具有更高的效率，其实现需要借助栈来实现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def preorderTraversal(self, root):
        stack = []
        res = []
        while (root or len(stack) != 0): # 注意这个终止条件
            if root:
                res.append(root.val)
                stack.append(root)
                root = root.left
            else:
                root = stack[len(stack) - 1]
                stack.pop()
                root = root.right
        return res
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;中序遍历-递归&#34;&gt;中序遍历-递归&lt;/h2&gt;

&lt;p&gt;基本同上：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def inorderTraversal(self, root):
        res = []
        def pre(root):
            if not root:
                return 
            pre(root.left)
            res.append(root.val)
            pre(root.right)
        pre(root)
        return res
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;中序遍历-循环&#34;&gt;中序遍历-循环&lt;/h2&gt;

&lt;p&gt;中序遍历的循环实现和前序遍历很类似，无非就是（出栈）打印的时机不一样。在代码里的体现就是&lt;code&gt;res.append(root.val)&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def inorderTraversal(self, root):
        stack = []
        res = []
        while (root or len(stack) != 0): # 注意这个终止条件
            if root:
                stack.append(root)
                root = root.left
            else:
                root = stack[len(stack) - 1]
                res.append(root.val)
                stack.pop()
                root = root.right
        return res
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;后序遍历-递归&#34;&gt;后序遍历-递归&lt;/h2&gt;

&lt;p&gt;递归很简单，直接给出代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def postorderTraversal(self, root):
        res = []
        def pre(root):
            if not root:
                return 
            pre(root.left)
            pre(root.right)
            res.append(root.val)
        pre(root)
        return res
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;后序遍历-循环&#34;&gt;后序遍历-循环&lt;/h2&gt;

&lt;p&gt;相比前两个而言，后序遍历会比较复杂一点，因为在后序遍历中，必须最后打印根节点的值，也就是说必须先打印左子树和右子树的值。在具体的实现当中，我们可以使用一个&lt;code&gt;last&lt;/code&gt;指针，表示在上一时刻访问多的节点。当某个节点没有左右子节点或者右子节点已经访问过了（此时左子节点肯定也访问过了），这个节点的值才可以被打印出来。以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def postorderTraversal(self, root):
        stack = []
        res = []
        last = None
        while (root or len(stack) != 0): # 注意这个终止条件
            while root: # 一直往左下搜索，使节点入栈
                stack.append(root)
                root = root.left
            root = stack[len(stack) - 1] # 开始分析栈内节点
            if (root.right and root.right != last): # 如果当前节点有右子节点并且没被访问过，又要开始对右子树的访问
                root = root.right
            else: # 不是以上情况的时候就可以输出当前根节点了
                res.append(root.val)
                stack.pop()
                last = root # 记录
                root = None # 保证下一次处理栈顶元素
        return res
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;层序遍历-循环&#34;&gt;层序遍历-循环&lt;/h2&gt;

&lt;p&gt;第一种层序遍历要求的打印顺序是：根节点先打印叶子节点最后打印的。思路是每遍历完当前层所有的节点的时候，将当前层内节点拥有的子节点装入列表，以备下一步再开始之前的步骤：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def levelOrder(self, root):
        if not root:
            return []
        ans, level = [], [root]
        while level:
            ans.append([node.val for node in level])
            temp = []
            for node in level:
                temp.extend([node.left, node.right])
            level = [leaf for leaf in temp if leaf]
        return ans
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;层序遍历2-循环&#34;&gt;层序遍历2-循环&lt;/h2&gt;

&lt;p&gt;第一种层序遍历要求的打印顺序是和之前相反，但这个在Python中不是大问题，直接一条命令就可以&lt;code&gt;res[::-1]&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;字符串翻转&#34;&gt;字符串翻转&lt;/h1&gt;

&lt;p&gt;字符串的翻转涉及到比较多的题目，比如，从最简单的字符串翻转的概念题到涉及回文串的题。总结一下这类题目对“启后”——在将来的面试中解决新的题目——还是很有帮助的。这里介绍几个这样的题目。&lt;/p&gt;

&lt;h2 id=&#34;翻转字符串&#34;&gt;翻转字符串&lt;/h2&gt;

&lt;p&gt;把一个字符串最左侧的若干字符截取下来，保持其顺序，放到原字符串截断后留下的子串前面，这个称之为翻转字符串。举个例子，如果&lt;code&gt;A=&amp;quot;abcde&amp;quot;&lt;/code&gt;，那么&lt;code&gt;B=&amp;quot;deabc&amp;quot;&lt;/code&gt;是&lt;code&gt;A&lt;/code&gt;的一个翻转。如果判断一个字符串是不是另外一字符串的翻转呢？解题的思路就是，如果&lt;code&gt;B&lt;/code&gt;是&lt;code&gt;A&lt;/code&gt;的一个翻转字符串的话，&lt;code&gt;A&lt;/code&gt;必须要在&lt;code&gt;(B + B)[1:-1]&lt;/code&gt;中能找到，去掉最后和最前的字符是为了保证&lt;code&gt;A=&amp;quot;aaaa&amp;quot;&lt;/code&gt;，&lt;code&gt;B=&amp;quot;aa&amp;quot;&lt;/code&gt;的情况是不符合要求的。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    def rotateString(self, A, B):
        if len(A) == 0 and len(B) == 0:
            return True
        if len(A) == 0:
            return False
        s = (B + B)[1:-1]
        if A not in s:
            return False
        else:
            return True
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Markdown</title>
      <link>http://chanrom.github.io/post/mimic/markdown/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chanrom.github.io/post/mimic/markdown/</guid>
      
        <description>

&lt;h1 id=&#34;参考网站&#34;&gt;参考网站&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/markdown&#34;&gt;Markdown 编辑器语法指南&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;代码高亮&#34;&gt;代码高亮&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;python sdf
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;标题&#34;&gt;标题&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# 标题
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;标题1&#34;&gt;标题1&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;标题1
======
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;标题2&#34;&gt;标题2&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;标题2
-----
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;大标题&#34;&gt;大标题&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;## 大标题 ##
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;小标题&#34;&gt;小标题&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;### 小标题 ###
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;粗体&#34;&gt;粗体&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;斜体文本&lt;/em&gt;    &lt;em&gt;斜体文本&lt;/em&gt;
&lt;strong&gt;粗体文本&lt;/strong&gt;    &lt;strong&gt;粗体文本&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;粗斜体文本&lt;/em&gt;&lt;/strong&gt;    &lt;strong&gt;&lt;em&gt;粗斜体文本&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;*斜体文本*    _斜体文本_
**粗体文本**    __粗体文本__
***粗斜体文本***    ___粗斜体文本___
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>使用Github搭建Hugo博客站</title>
      <link>http://chanrom.github.io/post/mimic/how-to/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://chanrom.github.io/post/mimic/how-to/</guid>
      
        <description>

&lt;h1 id=&#34;为什么要搭建个人博客&#34;&gt;为什么要搭建个人博客&lt;/h1&gt;

&lt;p&gt;我们在网络上获取别人的经验和知识的时候，通常呈现出来的都是一篇篇页面精致、内容专业的博客，令人耳目一新。有自己的博客，可以分享自己对一些事情、或者专业论文的看法，提高自己的知名度，使得我们在无穷无尽的因特网上有一个向世界展现自己的途径。&lt;/p&gt;

&lt;h1 id=&#34;准备工作&#34;&gt;准备工作&lt;/h1&gt;

&lt;p&gt;使用Github+Hugo建立个人博客之前，我们可能具备以下一些基础知识和工作：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git命令&lt;/li&gt;
&lt;li&gt;Github账号&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;目前主要参考的建站博客是&lt;a href=&#34;https://keysaim.github.io/post/blog/deploy-hugo-blog-in-github.io/&#34;&gt;keysaim&lt;/a&gt;，完全按照这个博客的做法就可以搭建成功。&lt;/p&gt;

&lt;h1 id=&#34;结语&#34;&gt;结语&lt;/h1&gt;

&lt;p&gt;大家有兴趣可以自己尝试做一个个人博客！&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>